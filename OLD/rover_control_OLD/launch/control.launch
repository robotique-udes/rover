<?xml version='1.0'?>
<launch>

  <arg name="mini" default="true"/>
  <arg name="simulation" default="false"/>
  <arg name="gps_enabled" default="false" />

  

  <group if="$(arg mini)">
    <!-- Load robot description -->
    <include file="$(find rover_mini_description)/launch/description.launch" />

    <group unless="$(arg simulation)">
      <!-- Launch rover base controller-->
      <include file="$(find rover_mini_control)/launch/base_controller.launch" />
    </group>
  </group>

  <group unless="$(arg mini)">
    <!-- Load robot description -->
    <include file="$(find rover_description)/launch/description.launch" />

    <group unless="$(arg simulation)">
      <!-- Launch rover base controller-->
      <!-- <include file="$(find rover_control)/launch/base_controller.launch" /> -->
    </group>
  </group>

  <!-- Only launch the following if not in simulation -->
  <group unless="$(arg simulation)">
    <!-- Launch sensors on real rover-->
    <group if="$(arg gps_enabled)">
      <include file="$(find rover_control)/launch/nmea_serial_driver.launch" />
    </group>
    <include file="$(find imu_bno055)/launch/imu.launch" />
    <!--<include file="$(find rover_cam)/launch/camera.launch" />-->
    <include file="$(find rover_cam)/launch/realsense.launch" />
  </group>

  <include file="$(find rover_control)/launch/watchdog.launch" />

  <node name="cmd_mux" pkg="rover_control" type="cmd_mux.py" output="screen" >
    <param name="timeout" type="double" value="1" />
  </node>

  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  <node pkg="robot_localization" type="ekf_localization_node" name="local_ekf_localization">
    <rosparam command="load" file="$(find rover_control)/config/local_ekf_localization.yaml" />
    <remap from="/odometry/filtered" to="/local_ekf_localization/odom" />
  </node>

  <node pkg="robot_localization" type="ekf_localization_node" name="global_ekf_localization">
    <rosparam command="load" file="$(find rover_control)/config/global_ekf_localization.yaml" />
    <remap from="/odometry/filtered" to="/global_ekf_localization/odom" />
  </node>

  <group if="$(arg gps_enabled)">
    <node name="navsat_transform_node" pkg="robot_localization" type="navsat_transform_node" >
      <param name="zero_altitude" value="true" />
      <param name="publish_filtered_gps" value="true" />
      <remap from="/gps/fix" to="/fix" />
      <remap from="/odometry/filtered" to="/global_ekf_localization/odom" />
    </node>
  </group>

  <!-- Launch map related nodes -->
  <node pkg="swri_transform_util" type="initialize_origin.py" name="initialize_origin" >
    <param name="config" value="$(find rover_viz)/mapviz.mvc" />
    <param name="local_xy_frame" value="map"/> 
    <param name="local_xy_origin" value="auto"/> <!-- use "auto" for real rover, don't know why it doesn't work for sim -->
    <rosparam param="local_xy_origins">
      [{ name: udes,
         latitude: 45.37833584,
         longitude: -71.9276222,
         altitude: 0.0,
         heading: 0.0}]
    </rosparam>
  </node>

  <node pkg="tf" type="static_transform_publisher" name="swri_transform" args="0 0 0 0 0 0 /map /origin 100"  />

</launch>
